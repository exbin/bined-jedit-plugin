version = '0.2.1.2'

buildscript {
    repositories {
        mavenLocal()
        jcenter()
    }
}

['java', 'distribution', 'maven-publish'].each {
    apply plugin: it
}
import org.gradle.util.VersionNumber

String binedVersion = '0.2.1';
String binaryDataVersion = '0.2.1';

sourceCompatibility = '1.8'

[compileJava, compileTestJava]*.options*.encoding = 'UTF-8'

tasks.withType(JavaCompile) {
    options.compilerArgs << "-Xlint:unchecked" << "-Xlint:deprecation"
    doFirst {
        options.fork = true
        if (JavaVersion.current() == JavaVersion.VERSION_1_8) {
            if (VersionNumber.parse(gradle.gradleVersion) >= VersionNumber.parse('5.0')) {
                options.bootstrapClasspath = files("${System.properties['java.home']}/lib/rt.jar", "$File.pathSeparator${System.properties['java.home']}/jre/lib/jsse.jar")
            } else {
                options.bootClasspath = "${System.properties['java.home']}/lib/rt.jar"
                options.bootClasspath += "$File.pathSeparator${System.properties['java.home']}/jre/lib/jsse.jar"
            }
        }
    }
}

// Disable tests on build
if (!gradle.startParameter.taskNames.any {it.endsWith("test")}) {
    tasks.withType(Test) {enabled = false}
}

task testJar(type: Jar, dependsOn: testClasses) {
    archiveClassifier = 'tests'
    archiveBaseName = "test-${project.archivesBaseName}"
    from sourceSets.test.output
}

configurations {
    tests
}

artifacts {
    tests testJar
}

task sourceJar(type: Jar) {
    archiveClassifier = 'sources'
    from sourceSets.main.java
}

javadoc {
    if (JavaVersion.current() != JavaVersion.VERSION_1_8) {
        options.addBooleanOption('html5', true)
    }
}

task javadocJar (type: Jar, dependsOn: javadoc) {
    archiveClassifier = 'javadoc'
    from javadoc.destinationDir
}

if (!hasProperty('mainClass')) {
    ext.mainClass = 'org.exbin.bined.jedit.NoMainClass'
}

repositories {
    mavenCentral()
    flatDir {
        dirs "lib"
    }
}

def binedLibrary = { String libName ->
    return (libName.endsWith('-SNAPSHOT')) ? ":${libName}-${binedVersion}" : "org.exbin.bined:${libName}:${binedVersion}"
}

def binaryDataLibrary = { String libName ->
    return (libName.endsWith('-SNAPSHOT')) ? ":${libName}-${binaryDataVersion}" : "org.exbin.auxiliary:${libName}:${binaryDataVersion}"
}

dependencies {
    implementation ':jedit'

    implementation binedLibrary('bined-core')
    implementation binedLibrary('bined-extended')
    implementation binedLibrary('bined-highlight-swing')
    implementation binedLibrary('bined-operation')
    implementation binedLibrary('bined-operation-swing')
    implementation binedLibrary('bined-swing')
    implementation binedLibrary('bined-swing-extended')
    implementation binaryDataLibrary('binary_data')
    implementation binaryDataLibrary('binary_data-paged')
    implementation binaryDataLibrary('binary_data-delta')
    implementation group: 'org.bouncycastle', name: 'bcprov-jdk15on', version: '1.70'
    implementation 'com.google.code.findbugs:jsr305:3.0.2'
    testImplementation group : 'junit', name: 'junit', version: '4.13.2'
}

jar {
    manifest {
        attributes(
            'Main-Class': mainClass
        )
    }
}

task fatJar(type: Jar) {
    manifest {
        attributes(
            'Main-Class': mainClass
        )
    }

    archiveBaseName = 'bined-jedit-plugin-fat'
    from configurations.compileClasspath.findAll { it.name != 'jedit.jar' }.collect { it.isDirectory() ? it : zipTree(it) }
    destinationDirectory = file("$buildDir")
}

distZip.dependsOn jar
distTar.dependsOn jar

distributions {
    main {
        contents {
            from 'src/dist'
            include 'readme.txt'

            from '.'
            include 'changes.txt'

            into('') {
                from project.jar.archivePath
                include '*'
                rename { filename -> "BinEdPlugin.jar" }
            }

            into('') {
                from configurations.compileClasspath.findAll { !it.isDirectory() && it.name.endsWith('.jar') && it.name != 'jedit.jar' && it.name != 'jsr305-3.0.2.jar' }.collect { it }
                include '*'
                rename { filename -> filename.replace('-' + binedVersion + '.jar', '.jar').replace('-' + binaryDataVersion + '.jar', '.jar').replace('bcprov-jdk15on-1.70.jar','bcprov-jdk15on.jar') }
            }
        }
    }
}
